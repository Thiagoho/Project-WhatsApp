const { resolve } = require('path');
const qrcode = require('qrcode-terminal');
const { Client, Buttons, List, MessageMedia } = require('whatsapp-web.js');
const client = new Client();

// Funcionalidade principais do Express:

const express = require('express');
const app = express();

app.get('/', (req, res) => {
    res.send('Hello, Express!');
});
app.listen(3000, () => {
    console.log('Servidor rodando na porta 3000');

 });
const userSessions = {} // Armazena o estado de cada usuário.
//Marca de veículos no Brasil
const marcasValidas = ["Chevrolet", "Citroen", "Fiat", "Ford", "Jeep", "Nissan",
    "Renault", "Toyota", "Volkswagen", "Hyundai", "Peugeot", "Audi", "Land Rover",
    "Byd"

];
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

//Criando a função de Temporizador seria o limite de tempo se o usuário deixar de cadastrar,
// recebe uma mensagem.

const iniciarTimeout = (msg) => {
    if (userSessions[msg.from].timeout) {
        clearTimeout(userSessions[msg.from].timeout);
    }
    userSessions[msg.from].timeout = setTimeout(async () => {
        await client.sendMessage(msg.from, "⏳ Você não completou o cadastro em 3 minutos.\nSeu tempo expirou! Por favor, inicie o processo novamente.");
        delete userSessions[msg.from];
    }, 180000); // 3 minutos (180000ms)
};

client.on('message', async msg => {

    if (msg.body.match(/(menu|Menu|dia|tarde|noite|oi|Oi|Olá|olá|ola|Ola)/i) && msg.from.endsWith('@c.us')) {
        const chat = await msg.getChat();
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        const contact = await msg.getContact();
        const name = contact.pushname;

        // Se for a primeira interação, exibe as opções principais
        if (!userSessions[msg.from]) {
            userSessions[msg.from] = { etapa: 'inicio' };
            iniciarTimeout(msg);

            await client.sendMessage(
                msg.from,
                `Olá! ${name.split(" ")[0]} 👋 Sou o assistente virtual da empresa Lava Jato Garagem💦.\n` +
                `Nosso serviço de lava jato oferece lavagem completa para seu veículo.\n` +
                `Trabalhamos 7 dias por semana, com agendamento direto pelo WhatsApp.\n\n` +
                `Escolha uma das opções a seguir e envie o número referente à sua escolha:\n\n` +
                `1️⃣ Quero agendar um serviço.\n` +
                `2️⃣ Ver serviços disponíveis.\n` +
                `3️⃣ Ver redes sociais.`
            );
            return;
        }
    }

    // Verifica se o usuário está na etapa inicial e valida a escolha
    if (userSessions[msg.from]?.etapa === 'inicio') {
        if (!['1', '2', '3'].includes(msg.body)) {
            await client.sendMessage(msg.from, '❌ Opção inválida! Por favor, escolha uma opção válida digitando o número correspondente.');
            return;
        }
        iniciarTimeout(msg);

        if (msg.body === '2') {
            await client.sendMessage(msg.from, `🚗 Nossos serviços disponíveis:\n\n🔹 Lavagem Simples\n🔹 Lavagem Completa\n🔹 Polimento\n🔹 Higienização Interna`);
            return;
        }

        const chat = await msg.getChat();
        await delay(3000);
        await chat.sendStateTyping();

        if (msg.body === '3') {
            await client.sendMessage(
                msg.from,
                `📲 Aqui estão nossas redes sociais:\n\n` +
                `📷 Instagram: https://www.instagram.com/lavajatogaragem\n` +
                `📘 Facebook: https://www.facebook.com/lavajatogaragem\n\n` +
                `Caso precise de mais informações, estou à disposição!`
            );
            delete userSessions[msg.from];
            return;
        }



        if (msg.body === '1') { // Aqui está o erro corrigido!
            await client.sendMessage(msg.from,
                `🚗 Você escolheu agendar um serviço.\n\nEscolha o tipo de lavagem desejada:\n\n` +
                `1️⃣ Lavagem Simples\n` +
                `2️⃣ Lavagem Completa\n` +
                `3️⃣ Polimento\n` +
                `4️⃣ Higienização Interna`
            );
            userSessions[msg.from].etapa = 'escolha_servico';
            return;
        }
    }
    if (userSessions[msg.from]?.etapa === 'escolha_servico') {
        const servicos = {
            '1': 'Lavagem Simples',
            '2': 'Lavagem Completa',
            '3': 'Polimento',
            '4': 'Higienização Interna'
        };
        if (!servicos[msg.body]) {
            await client.sendMessage(msg.from, '❌ Opção inválida! Por favor, escolha uma das opções disponíveis.');
            return;
        }
        iniciarTimeout(msg);
        userSessions[msg.from].servicoEscolhido = servicos[msg.body];
        userSessions[msg.from].etapa = 'placa';

        await client.sendMessage(msg.from, `✅ Serviço escolhido: ${servicos[msg.body]}\n\n➡️ Agora, informe a placa do seu carro (Exemplo: ABC1D23 ou ABC-1234):`);
        return;
    }

    // Cadastro do veículo - placa
    if (userSessions[msg.from]?.etapa === 'placa') {
        const placaRegex = /^[A-Z]{3}-\d{4}$|^[A-Z]{3}\d[A-Z]\d{2}$/i;
        if (!placaRegex.test(msg.body)) {
            await delay(3000);
            await client.sendMessage(msg.from, '❌ Placa inválida! Informe no formato correto (AAA-1234 ou ABC1D23).');
            return;
        }

        iniciarTimeout(msg);

        userSessions[msg.from].placa = msg.body.toUpperCase();
        userSessions[msg.from].etapa = 'marca';

        await client.sendMessage(msg.from, `✅ Placa registrada: ${msg.body.toUpperCase()}\n➡️ Agora, informe a marca do veículo:`);
        return;
    }

    // Cadastro do veículo - Marca
    if (userSessions[msg.from]?.etapa === 'marca') {
        let marcaInformada = msg.body.trim();
        if (marcasValidas.includes(marcaInformada)) {
            userSessions[msg.from].marca = marcaInformada;
            const { placa } = userSessions[msg.from];

            await delay(3000);
            await client.sendMessage(
                msg.from,
                `✅ Cadastro completo!\n\n` +
                `🔹 Placa: ${placa}\n` +
                `🔹 Marca: ${marcaInformada}\n\n` +
                `Agora você pode agendar seu atendimento!`
            );
            delete userSessions[msg.from];
        } else {
            await delay(3000);
            await client.sendMessage(
                msg.from,
                `❌ A marca "${marcaInformada}" não está cadastrada.\n` +
                `Por favor, informe uma marca válida da lista:\n${marcasValidas.join(', ')}`
            );
        }
        return;
    }
});

